[Elab.command] [0.008484] example :
        (let HAA0 := h a a;
          let HAA1 := h HAA0 HAA0;
          HAA1) =
          (c) :=
      by simp only [eq_haa_a]
  [Elab.step] [0.000012] expected type: Sort ?u.72, term
      Type
  [Elab.step] [0.000180] expected type: Sort ?u.74, term
      α → α
    [Elab.step] [0.000097] expected type: Type, term
        α
      [Meta.isDefEq] [0.000031] ✅️ Sort ?u.75 =?= Type
        [Meta.isLevelDefEq] [0.000004] ✅️ ?u.75 =?= 1
    [Elab.step] [0.000052] expected type: Type, term
        α
      [Meta.isDefEq] [0.000012] ✅️ Sort ?u.76 =?= Type
        [Meta.isLevelDefEq] [0.000003] ✅️ ?u.76 =?= 1
  [Elab.step] [0.000133] expected type: Sort ?u.78, term
      α → α
    [Elab.step] [0.000057] expected type: Type, term
        α
      [Meta.isDefEq] [0.000020] ✅️ Sort ?u.79 =?= Type
        [Meta.isLevelDefEq] [0.000003] ✅️ ?u.79 =?= 1
    [Elab.step] [0.000046] expected type: Type, term
        α
      [Meta.isDefEq] [0.000011] ✅️ Sort ?u.80 =?= Type
        [Meta.isLevelDefEq] [0.000003] ✅️ ?u.80 =?= 1
  [Elab.step] [0.000197] expected type: Sort ?u.82, term
      α → α → α
    [Elab.step] [0.000050] expected type: Type, term
        α
      [Meta.isDefEq] [0.000012] ✅️ Sort ?u.83 =?= Type
        [Meta.isLevelDefEq] [0.000003] ✅️ ?u.83 =?= 1
    [Elab.step] [0.000120] expected type: Sort ?u.84, term
        α → α
      [Elab.step] [0.000042] expected type: Type, term
          α
        [Meta.isDefEq] [0.000011] ✅️ Sort ?u.85 =?= Type
          [Meta.isLevelDefEq] [0.000003] ✅️ ?u.85 =?= 1
      [Elab.step] [0.000052] expected type: Type, term
          α
        [Meta.isDefEq] [0.000018] ✅️ Sort ?u.86 =?= Type
          [Meta.isLevelDefEq] [0.000003] ✅️ ?u.86 =?= 1
  [Elab.step] [0.000047] expected type: Type, term
      α
    [Meta.isDefEq] [0.000012] ✅️ Sort ?u.88 =?= Type
      [Meta.isLevelDefEq] [0.000004] ✅️ ?u.88 =?= 1
  [Elab.step] [0.000106] expected type: Type, term
      α
    [Meta.isDefEq] [0.000036] ✅️ Sort ?u.90 =?= Type
      [Meta.isLevelDefEq] [0.000003] ✅️ ?u.90 =?= 1
  [Elab.step] [0.000068] expected type: Type, term
      α
    [Meta.isDefEq] [0.000016] ✅️ Sort ?u.92 =?= Type
      [Meta.isLevelDefEq] [0.000005] ✅️ ?u.92 =?= 1
  [Elab.step] [0.000724] expected type: Sort ?u.94, term
      ∀ x y : α, (h x y) = c
    [Elab.step] [0.000699] expected type: Sort ?u.94, term
        forall (x : α) (y : α), (h x y) = c
      [Elab.step] [0.000066] expected type: Type, term
          α
        [Meta.isDefEq] [0.000024] ✅️ Sort ?u.95 =?= Type
          [Meta.isLevelDefEq] [0.000013] ✅️ ?u.95 =?= 1
      [Elab.step] [0.000058] expected type: Type, term
          α
        [Meta.isDefEq] [0.000014] ✅️ Sort ?u.97 =?= Type
          [Meta.isLevelDefEq] [0.000004] ✅️ ?u.97 =?= 1
      [Elab.step] [0.000483] expected type: Sort ?u.99, term
          (h x y) = c
        [Elab.step] [0.000460] expected type: Sort ?u.99, term
            binrel% Eq✝ (h x y) c
          [Elab.step] [0.000182] expected type: <not-available>, term
              h x y
            [Elab.step] [0.000051] expected type: α, term
                x
              [Meta.isDefEq] [0.000001] ✅️ α =?= α
            [Meta.isDefEq] [0.000001] ✅️ α =?= α
            [Elab.step] [0.000036] expected type: α, term
                y
              [Meta.isDefEq] [0.000001] ✅️ α =?= α
            [Meta.isDefEq] [0.000001] ✅️ α =?= α
          [Elab.step] [0.000032] expected type: <not-available>, term
              c
          [Meta.isDefEq] [0.000001] ✅️ α =?= α
          [Meta.isDefEq] [0.000001] ✅️ α =?= α
          [Meta.isDefEq] [0.000000] ✅️ α =?= α
          [Meta.isDefEq] [0.000054] ✅️ α =?= ?m.101
            [Meta.isDefEq.assign] [0.000044] ✅️ ?m.101 := α
              [Meta.isDefEq.assign.checkTypes] [0.000029] ✅️ (?m.101 : Sort ?u.100) := (α : Type)
                [Meta.isDefEq] [0.000014] ✅️ Sort ?u.100 =?= Type
                  [Meta.isLevelDefEq] [0.000004] ✅️ ?u.100 =?= 1
          [Meta.isDefEq] [0.000004] ✅️ α =?= α
  [Elab.definition.header] [0.001292] _example
    [Elab.step] [0.001122] expected type: Sort ?u.103, term
        (let HAA0 := h a a;
          let HAA1 := h HAA0 HAA0;
          HAA1) =
          (c)
      [Elab.step] [0.001099] expected type: Sort ?u.103, term
          binrel% Eq✝
            (let HAA0 := h a a;
            let HAA1 := h HAA0 HAA0;
            HAA1)
            (c)
        [Elab.step] [0.000811] expected type: <not-available>, term
            let HAA0 := h a a;
            let HAA1 := h HAA0 HAA0;
            HAA1
          [Elab.step] [0.000020] expected type: Sort ?u.105, term
              _
          [Elab.step] [0.000271] expected type: α, term
              h a a
            [Meta.isDefEq] [0.000051] ✅️ ?m.106 =?= α
              [Meta.isDefEq.assign] [0.000041] ✅️ ?m.106 := α
                [Meta.isDefEq.assign.checkTypes] [0.000024] ✅️ (?m.106 : Sort ?u.105) := (α : Type)
                  [Meta.isDefEq] [0.000015] ✅️ Sort ?u.105 =?= Type
                    [Meta.isLevelDefEq] [0.000004] ✅️ ?u.105 =?= 1
            [Elab.step] [0.000047] expected type: α, term
                a
              [Meta.isDefEq] [0.000001] ✅️ α =?= α
            [Meta.isDefEq] [0.000001] ✅️ α =?= α
            [Elab.step] [0.000048] expected type: α, term
                a
              [Meta.isDefEq] [0.000001] ✅️ α =?= α
            [Meta.isDefEq] [0.000001] ✅️ α =?= α
            [Meta.isDefEq] [0.000004] ✅️ α =?= α
          [Meta.isDefEq] [0.000003] ✅️ α =?= α
          [Elab.step] [0.000398] expected type: <not-available>, term
              let HAA1 := h HAA0 HAA0;
              HAA1
            [Elab.step] [0.000008] expected type: Sort ?u.108, term
                _
            [Elab.step] [0.000254] expected type: α, term
                h HAA0 HAA0
              [Meta.isDefEq] [0.000051] ✅️ ?m.109 =?= α
                [Meta.isDefEq.assign] [0.000034] ✅️ ?m.109 := α
                  [Meta.isDefEq.assign.checkTypes] [0.000022] ✅️ (?m.109 : Sort ?u.108) := (α : Type)
                    [Meta.isDefEq] [0.000014] ✅️ Sort ?u.108 =?= Type
                      [Meta.isLevelDefEq] [0.000004] ✅️ ?u.108 =?= 1
              [Elab.step] [0.000058] expected type: α, term
                  HAA0
                [Meta.isDefEq] [0.000003] ✅️ α =?= α
              [Meta.isDefEq] [0.000002] ✅️ α =?= α
              [Elab.step] [0.000037] expected type: α, term
                  HAA0
                [Meta.isDefEq] [0.000002] ✅️ α =?= α
              [Meta.isDefEq] [0.000002] ✅️ α =?= α
              [Meta.isDefEq] [0.000002] ✅️ α =?= α
            [Meta.isDefEq] [0.000003] ✅️ α =?= α
            [Elab.step] [0.000026] expected type: <not-available>, term
                HAA1
        [Elab.step] [0.000023] expected type: <not-available>, term
            c
        [Meta.isDefEq] [0.000001] ✅️ α =?= α
        [Meta.isDefEq] [0.000001] ✅️ α =?= α
        [Meta.isDefEq] [0.000000] ✅️ α =?= α
        [Meta.isDefEq] [0.000044] ✅️ α =?= ?m.113
          [Meta.isDefEq.assign] [0.000035] ✅️ ?m.113 := α
            [Meta.isDefEq.assign.checkTypes] [0.000022] ✅️ (?m.113 : Sort ?u.104) := (α : Type)
              [Meta.isDefEq] [0.000013] ✅️ Sort ?u.104 =?= Type
                [Meta.isLevelDefEq] [0.000004] ✅️ ?u.104 =?= 1
        [Meta.isDefEq] [0.000004] ✅️ α =?= α
    [Meta.instantiateMVars] [0.000007] (let HAA0 := h a a;
          let HAA1 := h HAA0 HAA0;
          HAA1) =
          c
  [Meta.instantiateMVars] [0.000001] (let HAA0 := h a a;
        let HAA1 := h HAA0 HAA0;
        HAA1) =
        c
  [Elab.definition.value] [0.004023] _example
    [Elab.step] [0.000021] expected type: (let HAA0 := h a a;
          let HAA1 := h HAA0 HAA0;
          HAA1) =
          c, term
        by simp only [eq_haa_a]
    [Meta.isDefEq] [0.000002] ✅️ (let HAA0 := h a a;
          let HAA1 := h HAA0 HAA0;
          HAA1) =
          c =?= (let HAA0 := h a a;
          let HAA1 := h HAA0 HAA0;
          HAA1) =
          c
    [Elab.step] [0.003440] simp only [eq_haa_a]
      [Elab.step] [0.003376] simp only [eq_haa_a]
        [Elab.step] [0.003335] simp only [eq_haa_a]
          [Meta.whnf] [0.000060] Non-easy whnf: (a = a) = True
          [Meta.whnf] [0.000007] Non-easy whnf: (?a = ?a) = True
          [Meta.whnf] [0.000003] Non-easy whnf: (?a = ?a) = True
          [Meta.whnf] [0.000004] Non-easy whnf: (p ↔ p) = True
          [Meta.whnf] [0.000003] Non-easy whnf: (?p ↔ ?p) = True
          [Meta.whnf] [0.000002] Non-easy whnf: (?p ↔ ?p) = True
          [Meta.whnf] [0.000020] Non-easy whnf: h x y = c
          [Meta.whnf] [0.000003] Non-easy whnf: h x y = c
          [Meta.whnf] [0.000005] Non-easy whnf: h ?x ?y = c
          [Meta.whnf] [0.000002] Non-easy whnf: h ?x ?y = c
          [Meta.whnf] [0.000006] Non-easy whnf: h ?x ?y = c
          [Meta.whnf] [0.000004] Non-easy whnf: h ?x ?y = c
          [Meta.isDefEq] [0.000264] ✅️ h ?x ?y =?= h a a
            [Meta.isDefEq] [0.000001] ✅️ h =?= h
            [Meta.isDefEq] [0.000061] ✅️ ?x =?= a
              [Meta.isDefEq.assign] [0.000047] ✅️ ?x := a
                [Meta.isDefEq.assign.checkTypes] [0.000029] ✅️ (?x : α) := (a : α)
                  [Meta.isDefEq] [0.000001] ✅️ α =?= α
            [Meta.isDefEq] [0.000026] ✅️ ?y =?= a
              [Meta.isDefEq.assign] [0.000018] ✅️ ?y := a
                [Meta.isDefEq.assign.checkTypes] [0.000008] ✅️ (?y : α) := (a : α)
                  [Meta.isDefEq] [0.000000] ✅️ α =?= α
          [Meta.whnf] [0.000006] Non-easy whnf: h a a = c
          [Meta.whnf] [0.000005] Non-easy whnf: h (h a a) = h c
          [Meta.whnf] [0.000003] Non-easy whnf: h a a = c
          [Meta.whnf] [0.000003] Non-easy whnf: h ?x ?y = c
          [Meta.whnf] [0.000002] Non-easy whnf: h ?x ?y = c
          [Meta.isDefEq] [0.000119] ✅️ h ?x ?y =?= h c c
            [Meta.isDefEq] [0.000001] ✅️ h =?= h
            [Meta.isDefEq] [0.000040] ✅️ ?x =?= c
              [Meta.isDefEq.assign] [0.000031] ✅️ ?x := c
                [Meta.isDefEq.assign.checkTypes] [0.000017] ✅️ (?x : α) := (c : α)
                  [Meta.isDefEq] [0.000001] ✅️ α =?= α
            [Meta.isDefEq] [0.000029] ✅️ ?y =?= c
              [Meta.isDefEq.assign] [0.000021] ✅️ ?y := c
                [Meta.isDefEq.assign.checkTypes] [0.000008] ✅️ (?y : α) := (c : α)
                  [Meta.isDefEq] [0.000000] ✅️ α =?= α
          [Meta.whnf] [0.000009] Non-easy whnf: h (h a a) (h a a) = h c c
          [Meta.whnf] [0.000004] Non-easy whnf: h c c = c
          [Meta.whnf] [0.000005] Non-easy whnf: h (h a a) (h a a) = c
          [Meta.whnf] [0.000004] Non-easy whnf: h (h a a) (h a a) = c
          [Meta.whnf] [0.000005] Non-easy whnf: (?a = ?a) = True
          [Meta.whnf] [0.000003] Non-easy whnf: (?a = ?a) = True
          [Meta.isDefEq] [0.000211] ✅️ ?a = ?a =?= c = c
            [Meta.isDefEq] [0.000050] ✅️ ?α =?= α
              [Meta.isDefEq.assign] [0.000040] ✅️ ?α := α
                [Meta.isDefEq.assign.checkTypes] [0.000027] ✅️ (?α : Sort ?u.156) := (α : Type)
                  [Meta.isDefEq] [0.000017] ✅️ Sort ?u.156 =?= Type
                    [Meta.isLevelDefEq] [0.000005] ✅️ ?u.156 =?= 1
            [Meta.isDefEq] [0.000033] ✅️ ?a =?= c
              [Meta.isDefEq.assign] [0.000022] ✅️ ?a := c
                [Meta.isDefEq.assign.checkTypes] [0.000011] ✅️ (?a : α) := (c : α)
                  [Meta.isDefEq] [0.000003] ✅️ α =?= α
            [Meta.isDefEq] [0.000002] ✅️ c =?= c
            [Meta.isLevelDefEq] [0.000009] ✅️ ?u.156 =?= 1
              [Meta.isLevelDefEq] [0.000000] ✅️ 0 =?= 0
          [Meta.whnf] [0.000006] Non-easy whnf: (h (h a a) (h a a) = c) = (c = c)
          [Meta.whnf] [0.000004] Non-easy whnf: (c = c) = True
          [Meta.appBuilder] [0.000220] ✅️ f: of_eq_true, xs: [Eq.trans
                 (congrArg (fun x => x = c)
                   (Eq.trans (congr (congrArg h ((fun x y => eq_haa_a x y) a a)) ((fun x y => eq_haa_a x y) a a))
                     ((fun x y => eq_haa_a x y) c c)))
                 (eq_self c)]
            [Meta.isDefEq] [0.000169] ✅️ ?p = True =?= (h (h a a) (h a a) = c) = True
              [Meta.isDefEq] [0.000067] ✅️ ?p =?= h (h a a) (h a a) = c
                [Meta.isDefEq.assign] [0.000054] ✅️ ?p := h (h a a) (h a a) = c
                  [Meta.isDefEq.assign.checkTypes] [0.000029] ✅️ (?p : Prop) := (h (h a a) (h a a) = c : Prop)
                    [Meta.isDefEq] [0.000011] ✅️ Prop =?= Prop
                      [Meta.isLevelDefEq] [0.000000] ✅️ 0 =?= 0
              [Meta.isDefEq] [0.000001] ✅️ True =?= True
              [Meta.isDefEq] [0.000006] ✅️ Prop =?= Prop
                [Meta.isLevelDefEq] [0.000000] ✅️ 0 =?= 0
              [Meta.isLevelDefEq] [0.000000] ✅️ 0 =?= 0
    [Meta.instantiateMVars] [0.000002] of_eq_true
          (Eq.trans
            (congrArg (fun x => x = c)
              (Eq.trans (congr (congrArg h ((fun x y => eq_haa_a x y) a a)) ((fun x y => eq_haa_a x y) a a))
                ((fun x y => eq_haa_a x y) c c)))
            (eq_self c))
  [Meta.instantiateMVars] [0.000000] of_eq_true
        (Eq.trans
          (congrArg (fun x => x = c)
            (Eq.trans (congr (congrArg h ((fun x y => eq_haa_a x y) a a)) ((fun x y => eq_haa_a x y) a a))
              ((fun x y => eq_haa_a x y) c c)))
          (eq_self c))
  [Meta.instantiateMVars] [0.000000] (let HAA0 := h a a;
        let HAA1 := h HAA0 HAA0;
        HAA1) =
        c
  [Meta.instantiateMVars] [0.000000] of_eq_true
        (Eq.trans
          (congrArg (fun x => x = c)
            (Eq.trans (congr (congrArg h ((fun x y => eq_haa_a x y) a a)) ((fun x y => eq_haa_a x y) a a))
              ((fun x y => eq_haa_a x y) c c)))
          (eq_self c))
  [Meta.instantiateMVars] [0.000000] (let HAA0 := h a a;
        let HAA1 := h HAA0 HAA0;
        HAA1) =
        c
  [Elab.def.maxSharing] [0.000122] share common exprs
  [Elab.def.fixLevelParams] [0.000033] fix level params
  [Elab.def.processPreDef] [0.000363] process pre-definitions
[Elab.command] [0.000103] end
[Elab.async] [0.000711] Lean.addDecl
  [Kernel] [0.000665] typechecking declarations [_example]
[Elab.async] [0.000256] Lean.compileDecls
  [compiler] [0.000076] compiling old: [_example]
